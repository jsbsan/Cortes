' Gambas class file

Private indice As Integer
Private FechaActualizada As Date
Private bf As Button

Public Sub LabelTotal_MouseDown()

End

Public Sub Form_Open()

  Dim nombreClienteTmp As String
  Dim nombreEmpleadoTmp As String

  If Settings["Update", False] = True Then
    'solo comprobar actualizacion al arranque si esta configurado para ello
    Application.busy = 1
    ModuleUpdate.comprobar("cortes", Application.Version, "http://seguimientodeapuestas.blogspot.com.es/2014/07/cortes.html", "oculto")
    Application.busy = 0
  Endif

  '' configuración iniciales al arrancar programa...
  If Settings["Directorio", "/tmp"] = "/tmp" Then Settings["Directorio"] = "/tmp"
  ModuleVarios.RutaTrabajo = Settings["Directorio", "/tmp"]

  If Settings["AplicarIvaServicio", "No"] = "No" Then Settings["AplicarIvaServicio"] = "No"
  If Settings["AplicarIvaCupon", "No"] = "No" Then Settings["AplicarIvaCupon"] = "No"

  If Not Exist(User.home &/ "Cortes") Then
    application.busy = 1
    Try Copy "Cortes.tar.gz" To user.home &/ "Cortes.tar.gz"
    Shell "cd " & user.home & ";tar xzvf Cortes.tar.gz"
    Wait 5
    Try Kill user.home &/ "Cortes.tar.gz"
    application.busy = 0
    'Wait 2 'espero que se copie la base de datos....
  Endif
  '' Comprobación de la base de datos Cortes y añadir las tabla y vistas necesarias...version 0.0.8
  ''añadir vistas y tablas de la version 0.1.4
  ModuleAlbaranesVistas.comprobarAlbaranesListas()

  'configuracion de menus
  opcionesBorradoMenu()

  ''inicio de contador horario
  TimerRecalcular.Start()
  TimerFecha.Trigger()
  TimerFecha.Start()
  Me.title = "Gestión de Recibos y Almacén para Serrvicios de Peluquería y Pequeñas tiendas. Versión " & Application.version

  reiniciarDato()

  formlistadoVentas.comprobarTablasEntradaRoboRoturaSalidaCREAR() 'para mostrar existencias

  Me.center

End

Public Sub Button1_Click()

  'añadir una nueva liena de descompuesto
  Dim hboxtmp As HBox

  Inc indice
  hboxtmp = New HBox(ScrollView1)
  hboxtmp.w = ScrollView1.W - 30
  hboxtmp.h = 20

  creabotones(hboxtmp)

  bf = hboxtmp.Tag["filtro"]
  bf.SetFocus()
  FiltroDescripcion_Click()

End

Public Sub creabotones(h As Hbox)

  Dim a As Integer
  Dim btmp As Button
  Dim textTabla As TextBox
  Dim textId As TextBox
  Dim textDescripciontmp As TextBox
  Dim valueCantidad As ValueBox
  Dim valuePrecio As ValueBox
  Dim valueDescuento As ValueBox
  Dim valueIva As ValueBox
  Dim LabelboxTotal As Label

  Dim coleccionDeObjetos As New Collection
  'boton de borrado
  btmp = New Button(h) As "borrado"
  btmp.Picture = Picture["icon:/16/remove"]
  btmp.w = 20
  btmp.h = 20
  btmp.tag = h
  coleccionDeObjetos.add(btmp, "borrado")

  'tabla
  textTabla = New TextBox(h) As "tabla"
  textTabla.w = LabelTabla.w
  textTabla.h = 20
  textTabla.tag = h
  textTabla.ReadOnly = True
  coleccionDeObjetos.add(textTabla, "tabla")

  'id
  textId = New TextBox(h) As "Id"
  textiD.w = Labelid.w
  textiD.h = 20
  textiD.tag = h
  textiD.ReadOnly = True
  coleccionDeObjetos.add(textiD, "id")

  'descripcion
  textDescripciontmp = New TextBox(h) As "descripcion"
  textDescripciontmp.w = LabelDescripcion.w - 20
  textDescripciontmp.h = 20
  textDescripciontmp.tag = h
  textDescripciontmp.ReadOnly = True
  coleccionDeObjetos.add(textDescripciontmp, "descripcion")

  'boton de filtrado...
  btmp = New Button(h) As "FiltroDescripcion"
  btmp.Picture = Picture["icon:/16/filter"]
  btmp.w = 20
  btmp.h = 20
  btmp.tag = h
  coleccionDeObjetos.add(btmp, "filtro")
  'cantidad
  valueCantidad = New ValueBox(h) As "cantidad"
  valueCantidad.x = LabelCantidad.x - ScrollView1.x
  valueCantidad.w = LabelCantidad.W
  valueCantidad.h = 20
  valueCantidad.tag = h

  valueCantidad.Background = Color.Yellow
  coleccionDeObjetos.add(valueCantidad, "cantidad")
  'precio
  valuePrecio = New ValueBox(h) As "precio"
  valuePrecio.x = LabelPrecio.x - ScrollView1.x
  valuePrecio.w = LabelPrecio.W
  valuePrecio.h = 20
  valuePrecio.tag = h

  If Settings["ModificarPrecios"] = "No" Then
    valuePrecio.ReadOnly = True
  Else
    valuePrecio.ReadOnly = False
    valuePrecio.Background = Color.Yellow
  Endif

  coleccionDeObjetos.add(valuePrecio, "precio")
  'dto
  valueDescuento = New ValueBox(h) As "descuento"
  valueDescuento.x = LabelDescuento.x - ScrollView1.x
  valueDescuento.w = LabelDescuento.W
  valueDescuento.h = 20
  valueDescuento.tag = h
  valueDescuento.Background = Color.Yellow
  coleccionDeObjetos.add(valueDescuento, "descuento")

  'iva
  valueIva = New ValueBox(h) As "iva"
  valueiva.x = Labeliva.x - ScrollView1.x
  valueiva.w = LabelIva.W
  valueiva.h = 20
  valueIva.tag = h
  valueIva.ReadOnly = True
  valueIva.Tooltip = "Cambiar % o si se aplica o no, ir al formulario de Configuracion"
  coleccionDeObjetos.add(valueIva, "iva")

  'total
  LabelboxTotal = New Label(h)
  labelboxTotal.x = LabelTotal.x - ScrollView1.x
  labelboxTotal.w = LabelTotal.W - 30
  labelboxTotal.h = 20
  labelboxTotal.text = Format$(0, ",#.##")
  labelboxTotal.alignment = Align.Right
  LabelboxTotal.Border = Border.Plain
  LabelboxTotal.tag = h
  coleccionDeObjetos.add(LabelboxTotal, "total")
  h.tag = coleccionDeObjetos

End

Public Sub FiltroDescripcion_Click()

  Dim htmp As HBox

  Dim nombre As New Variant[]

  ' Print "filtrar descompuestos"
  ' Print "indice:", Last.tag 'me devuelve el H donde estan alojados los controles
  htmp = Last.tag

  If IsNull(htmp) Then
    htmp = bf.tag
  Endif

  FormServicios.setnombre(nombre)

  FormServicios.irtab(0)
  FormServicios.ShowModal()

  If nombre[0] = Null Then
    'no ha hecho doble click en ningun servicio/producto/cupon

  Else
    htmp.tag["tabla"].text = nombre[0]
    htmp.tag["id"].text = nombre[1]
    htmp.tag["descripcion"].text = nombre[2]

    If nombre[0] = 3 Then
      'se trada de un cupon, lo resto
      htmp.Tag["cantidad"].value = -1 ' por defecto compramos una cantidad de CUPON
    Else
      htmp.Tag["cantidad"].value = 1 ' por defecto compramos una cantidad
    Endif

    htmp.Tag["precio"].value = nombre[3]
    htmp.Tag["descuento"].value = 0

    '' aplicar iva o no al producto/servico/cupon añadido AL RECIBO

    Select Case nombre[0] 'tipo de tabla: 1 servicio, 2 productos, 3 cupon
      Case 1 ' servicio
        If Settings["AplicarIvaServicio"] = "No" Then
          'No aplicar Iva al servicio (tabla 1)
        Else
          htmp.Tag["iva"].value = Settings["IVA"]
        Endif

      Case 2 'producto
        'siempre llevan iva
        htmp.Tag["iva"].value = Settings["IVA"]
      Case 3 ' cupon
        If Settings["AplicarIvaCupon"] = "No" Then
          'No aplicar Iva al cupon (tabla 3)
        Else
          htmp.Tag["iva"].value = Settings["IVA"]
        Endif
    End Select

  Endif

End

Public Sub borrado_click()

  Dim htmp As HBox

  htmp = Last.tag
  htmp.Delete

End

Public Sub calcula(htmp As Hbox)

  Dim total As Single

  total = htmp.Tag["cantidad"].value * htmp.Tag["precio"].value * (1 - htmp.Tag["descuento"].value / 100) * (1 + htmp.Tag["iva"].value / 100)

  htmp.Tag["total"].text = Format$(total, ",#.##")

End

Public Sub CalculoTotal()

  Dim sumatotal As Single
  Dim objTemp As Control
  'reviso todas las hbox que esten contenidos en el scrollview1
  For Each objTemp In ScrollView1.children

    If object.Type(objTemp) = "HBox" Then
      calcula(objTemp)
      If objTemp.Tag["total"].text = " " Then
        'no hacer nada
      Else
        sumatotal += Val(objTemp.Tag["total"].text)
      Endif

    Endif

  Next
  LabelSumaTotal.text = Format$(sumatotal, ",#.##")

End

Public Sub TimerRecalcular_Timer()

  CalculoTotal()

End

Public Sub ButtonSalir_Click()

  'salir de la aplilcacion
  TimerRecalcular.Stop()
  Wait 0.1
  Me.close

End

'menus

Public Sub Configurar_Click()

  Dim contrasena As String

  contrasena = FormPassword.pedir("Contraseña:")
  '  The path of the default configuration file is:
  '  User.Home &/ ".config/gambas" &/ Application.Name & ".conf"

  If IsNull(Settings["Contrasena"]) Then
    Settings["Contrasena"] = "cortes"
  Endif

  If contrasena = Settings["Contrasena"] Then
    FormConfigurar.ShowModal()
  Else
    Message.Error(("Contraseña no valida"))
  Endif

End

Public Sub tarifas_Click()

  FormServicios.ShowModal()

End

Public Sub TimerFecha_Timer()

  LabelFecha.text = Format$(Now, "mm/dd/yyyy hh:nn:ss")
  FechaActualizada = Now

End

Public Sub Servicios_Click()

  FormServicios.irtab(tipos.servicios)
  FormServicios.ShowModal()

End

Public Sub productos_Click()

  FormServicios.irtab(tipos.productos)
  FormServicios.ShowModal()

End

Public Sub cupones_Click()

  FormServicios.irtab(tipos.cupones)
  FormServicios.ShowModal()

End

Public Sub clientes_Click()
  'tipo cliente
  '

  FormClientes.ShowModal()

End

Public Sub empleados_Click()
  'tipo empleado

  FormClientes.ShowModal()

End

Public Sub ButtonBuscarEmpleado_Click()
  'tipo empleado

  Dim nombre As New Variant[]

  FormClientes.setnombre(nombre)
  FormClientes.cualtipo(tipos.empleado)
  FormClientes.ShowModal()

  If IsNull(nombre[0]) Then
  Else
    TextBoxEmpleado.text = nombre[0]  'string de nombre
    TextBoxEmpleado.tag = nombre[1] 'id
  Endif

End

Public Sub ButtonBuscarCliente_Click()

  'tipo cliente
  Dim nombre As New Variant[]

  FormClientes.setnombre(nombre)

  FormClientes.cualtipo(tipos.cliente)
  FormClientes.ShowModal()

  If nombre[0] = Null Then
  Else
    TextBoxCliente.text = nombre[0]
    TextBoxCliente.tag = nombre[1] 'id
  Endif

End

Public Sub historico_Click()

  FormHistoricoRegistros.showModal()

End

Public Sub ButtonGuardarImprimir_Click()

  Dim idFechayhora As String
  Dim v As New Variant[]

  Dim cantidadRecibida As Single
  Dim cantidadCambio As Single

  If LabelSumaTotal.text = " " Then
    LabelSumaTotal.text = "0"
  Endif

  v.Add(Val(LabelSumaTotal.text))

  If IsNull(v[0]) Then
    Return
  Endif

  FormCobro.setValores(v)
  FormCobro.ShowModal()

  If IsNull(v[0]) Then

    Return
  Else

    cantidadRecibida = v[0]
    Try cantidadCambio = v[1]

  Endif

  idFechayhora = LabelFecha.Text

  If ReciboAdd(idFechayhora) Then
    'guardar el recibo fue bien...
    ModuleVarios.imprimirRecibo(idFechayhora, cantidadRecibida, cantidadCambio)

    reiniciarDato()

  Endif

End

Public Sub MenuAgenda_Click()


'plan ya no existe en versiones de Ubuntu 20.04 
  ' Dim instalado As String
  ' 
  ' Shell "which plan" To instalado
  ' 
  ' If instalado = "" Then
  '   Message.Info(("Debe de instalar el programa plan (sudo apt-get install plan)"))
  ' Else
  '   Exec ["plan"]
  ' Endif

End

Public Sub Salir_Click()

  ButtonSalir_Click()

End

'-----------------------------------------------------------------------
Public Sub reiniciarDato()

  Dim nombreEmpleadoTmp As String
  Dim nombreClienteTmp As String

  Dim objtemp As Object
  'borrado de datos de cliente y empleado

  TextBoxEmpleado.Text = ""
  TextBoxCliente.Text = ""

  'cargar empleado y cliente por defecto..
  If Settings["EmpleadoPorDefecto", ""] <> "" Then
    nombreEmpleadoTmp = Settings["EmpleadoPorDefecto"]
    If comprobarSiExiste("empleado", nombreEmpleadoTmp) Then

      TextBoxEmpleado.text = Split(nombreEmpleadoTmp, "|")[1] 'string de nombre
      TextBoxEmpleado.tag = Split(nombreEmpleadoTmp, "|")[0] 'id
    Endif
  Endif
  If Settings["ClientePorDefecto", ""] <> "" Then
    nombreClienteTmp = Settings["ClientePorDefecto"]
    If comprobarSiExiste("cliente", nombreClienteTmp) Then
      TextBoxCliente.text = Split(nombreClienteTmp, "|")[1] 'string de nombre
      TextBoxCliente.tag = Split(nombreClienteTmp, "|")[0] 'id
    Endif
  Endif

  LabelSumaTotal.Text = ""
  'borrado de lineas de descomuestos
  'borrado de hbox...
  'reviso todas las hbox que esten contenidos en el scrollview1
  For Each objTemp In ScrollView1.children
    If object.Type(objTemp) = "HBox" Then
      objtemp.delete
    Endif

  Next

End

Public Sub ReciboAdd(FechaYhora As String) As Boolean

  Dim manejadorRecibo As New ReciboDAO
  Dim reciboDatos As New ReciboVO

  Dim manejadorLineaRecibo As New LineaReciboAdaptadaDAO
  Dim lineaReciboDatos As LineareciboVO

  Dim objTemp As Control
  Dim fechaAlbaran As Date

  'añadir recibo:
  'Tabla: ReciboDao
  'numero, empleado, total, cliente
  'fechaAlbaran = Date(Mid$(LabelFecha.text, 7, 4), Left(LabelFecha.text, 2), Mid$(LabelFecha.text, 4, 2), Mid$(LabelFecha.text, 12, 2), Mid$(LabelFecha.text, 15, 2), Mid$(LabelFecha.text, 18, 2))
  reciboDatos.fecha = Date(Year(FechaActualizada), Month(FechaActualizada), Day(FechaActualizada))
  If IsNull(TextBoxCliente.tag) Then
    Message.Info(("Debe de indicar un cliente"))
    Return False
  Endif

  reciboDatos.idcliente = TextBoxCliente.tag

  If IsNull(TextBoxEmpleado.tag) Then
    Message.Info(("Debe de indicar un empleado"))
    Return False
  Endif

  reciboDatos.idempleado = TextBoxEmpleado.tag
  reciboDatos.idlinearecibo = FechaYhora

  If LabelSumaTotal.text = " " Or LabelSumaTotal.text = "" Then LabelSumaTotal.text = "0"
  reciboDatos.importe = Val(LabelSumaTotal.text)

  manejadorRecibo.registrar(reciboDatos)
  'y lineas de descompuesto
  ' Tabla lineareciboDAO

  'reviso todas las hbox que esten contenidos en el scrollview1
  For Each objTemp In ScrollView1.children
    If object.Type(objTemp) = "HBox" Then

      If objTemp.tag["tabla"].text <> "" Then
        lineaReciboDatos = New LineareciboVO

        lineaReciboDatos.cantidad = objTemp.Tag["cantidad"].value
        lineaReciboDatos.descuento = objTemp.Tag["descuento"].value
        lineaReciboDatos.idlinearecibo = reciboDatos.idlinearecibo
        lineaReciboDatos.idproducto = objTemp.tag["id"].text
        lineaReciboDatos.precio = objTemp.Tag["precio"].value
        lineaReciboDatos.tabla = objTemp.tag["tabla"].text
        lineaReciboDatos.iva = objTemp.Tag["iva"].value

        manejadorLineaRecibo.registrar(lineaReciboDatos)
      Endif
    Endif

  Next
  Return True

End

Public Sub ButtonAgenda_Click()

  MenuAgenda_Click()

End

Public Sub ButtonNuevo_Click()

  reiniciarDato()

End

Public Sub TextBoxEmpleado_DblClick()

  ButtonBuscarEmpleado_Click()

End

Public Sub TextBoxCliente_DblClick()

  ButtonBuscarCliente_Click()

End

Public Sub ListadoVentas_Click()

  FormListadoVentas.ShowModal()

End

Public Sub ButtonHistoricoRecibos_Click()

  TimerRecalcular.Stop()
  FormHistoricoRegistros.showModal()
  TimerRecalcular.Start()

End

Public Sub ButtonInforme_Click()

  TimerRecalcular.Stop()
  FormListadoVentas.ShowModal()
  TimerRecalcular.Start()

End

Public Sub ButtonConfigurar_Click()

  TimerRecalcular.Stop()
  Configurar_Click()
  TimerRecalcular.Start()

End

Public Sub Ayuda_Click()

  TimerRecalcular.Stop()
  FormAyuda.ShowModal()
  TimerRecalcular.Start()

End

Public Sub ButtonEntradas_Click()

  TimerRecalcular.Stop()
  FormAlmacen.Showmodal()
  TimerRecalcular.Start()

End

'----------------------------------------------------
'configuraciones de la opcion de borrado de menus...
'----------------------------------------------------

Public Sub opcionesBorradoMenu()

End

Public Function comprobarSiExiste(tabla As String, texto As String) As Boolean

  Dim idtmp As String

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim hresult As Result

  idtmp = Split(texto, "|")[0] 'id

  conectar.Conexion()

  sqlstring = "SELECT id FROM " & tabla & " where id=&1"
  Try hresult = conectar.hconn.Exec(SQLString, idtmp)
  If Error Then
    Return False
  Else
    If IsNull(hresult) Or hresult.count = 0 Then
      Return False
    Else
      Return True
    Endif
  Endif

End

Public Sub Button2_Click()

  FormLibroClientes.Show()

End

Public Sub ButtonAbrirCajon_Click()

  Cajon.abrir()

End

Public Sub ButtonAcercaDE_Click()

  Ayuda_Click()

End
