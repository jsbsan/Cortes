' Gambas class file

Public Sub ButtonSalir_Click()

  Settings["NombrePeluqueria"] = TextBoxPeluqueria.Text
  settings["IVA"] = ValueBoxIva.value
  settings["DIRECCION"] = TextBoxDireccion.text
  Settings["Telefono"] = TextBoxTelefono.text
  Settings["ModificarPrecios"] = ComboBoxModificarRegistro.text
  Settings["BorradoRecibo"] = ComboBoxBorradoRecibo.text
  Settings["AplicarIvaCupon"] = ComboBoxCuponIva.text
  Settings["AplicarIvaServicio"] = ComboBoxServiciosIva.text
  Settings["Update"] = CheckBoxUpdateAlinicio.Value
  Settings["BorradoClientesEmpleados"] = CheckBoxBorradoEmpleadoCliente.Value
  Settings["BorradoTipos"] = CheckBoxBorradoServicosProductosCupoenes.value
  Settings["BorradoRecibos"] = CheckBoxBorradoRecibos.Value
  Settings["TipoNegocio"] = TextBoxTipoDeNegocio.text
  Settings.Save()
  Me.Close()

End

Public Sub Form_Open()
  'menu de borrado de cliente...
  'valor por defecto es que no se muestre

  LabelVersion.text = "Versión del programa: " & Application.Version
  If Settings["BorradoClientesEmpleados", False] = False Then Settings["BorradoClientesEmpleados"] = False
  CheckBoxBorradoEmpleadoCliente.Value = Settings["BorradoClientesEmpleados"]

  If Settings["BorradoTipos", False] = False Then Settings["BorradoTipos"] = False
  CheckBoxBorradoServicosProductosCupoenes.value = Settings["BorradoTipos"]

  If Settings["BorradoRecibos", False] = False Then Settings["BorradoRecibos"] = False
  CheckBoxBorradoRecibos.value = Settings["BorradoRecibos"]

  TextBoxTipoDeNegocio.text = Settings["TipoNegocio", "Servicio de Peluquería"]

  TextBoxPeluqueria.text = Settings["NombrePeluqueria", "las gemelas"]
  ValueBoxIva.value = settings["IVA", 21]
  TextBoxDireccion.text = settings["DIRECCION", ""]
  TextBoxTelefono.text = Settings["Telefono", ""]
  Label1Directorio.text = Settings["Directorio"]

  ComboBoxServiciosIva.Add("Si")
  ComboBoxServiciosIva.Add("No")
  ComboBoxServiciosIva.text = Settings["AplicarIvaServicio", "No"]

  ComboBoxCuponIva.Add("Si")
  ComboBoxCuponIva.Add("No")
  ComboBoxCuponIva.text = Settings["AplicarIvaCupon", "No"]

  ComboBoxModificarRegistro.Add("Si")
  ComboBoxModificarRegistro.Add("No")
  ComboBoxModificarRegistro.text = Settings["ModificarPrecios", "No"]

  ComboBoxBorradoRecibo.Add("Si")
  ComboBoxBorradoRecibo.Add("No")
  ComboBoxBorradoRecibo.text = Settings["BorradoRecibo", "No"]

  CheckBoxUpdateAlinicio.Value = Settings["Update", False]

  'empleados por defecto...

  'cargar empleado y cliente por defecto..
  ' Rellenar combobox de clientes y Empleados por defecto
  RellenaComboBoxClienteEmpleados()

  If Settings["EmpleadoPorDefecto", ""] <> "" Then
    ComboBoxEmpleadoPorDefecto.text = Settings["EmpleadoPorDefecto"]
  Endif

  If Settings["ClientePorDefecto", ""] <> "" Then
    ComboBoxClientePorDefecto.text = Settings["ClientePorDefecto"]

  Endif

  TextBoxPasswordRoot.text = Settings["pwr", ""]

  TextBoxUsbDispositivo.text = Settings["usbName", "/dev/ttyUSB0"]

End

Public Sub ButtonPassword_Click()
  'comprobar que la contraseña actual es correcto

  If TextBoxContrasenaActual.text = Settings["Contrasena"] Then
    'comprobar que l
    If TextBoxNueva1.text = TextBoxNueva2.text And TextBoxNueva2.text <> "" Then
      Settings["Contrasena"] = TextBoxNueva1.text
      Settings.Save()
      Message.Info(("La contraseña se ha cambiado"))
    Else
      Message.Info(("La contraseña nueva  no es igual en las dos etiquetas"))
    Endif
  Else
    Message.Info(("La contraseña no es la correcta, no he realizado el cambio"))
  Endif

End

Public Sub ButtonElegirCarpeta_Click()

  If Dialog.SelectDirectory() Then
  Else
    Settings["Directorio"] = Dialog.path
    Label1Directorio.text = Dialog.path
    ModuleVarios.RutaTrabajo = Dialog.path
  Endif

End

Public Sub ButtonUpdateManual_Click()

  '' Update manual
  Application.busy = 1
  ModuleUpdate.comprobar("cortes", Application.Version, "http://seguimientodeapuestas.blogspot.com.es/2014/07/cortes.html", "")
  Application.busy = 0

End

'------------------------------------------------
'copia de seguridad
'------------------------------------------------

Public Sub ButtonCrearCopiaSeguridad_Click()

  Dim nombrebasedatosfecha As String

  ''  CREAR COPIA SEGURIDAD
  'ELEGIR RUTA
  Dialog.Title = ("Crear copia de seguridad")
  If Not Dialog.SelectDirectory() Then
    'HACER COPIA, CAMBIO EL NOMBRE (PONER FECHA)
    nombrebasedatosfecha = user.home &/ "Cortes" & Format(Now, " yyyy-mm-dd hh nn ss") & ".sqlite"

    Message.Info(("Se va a copiar la base de datos, con el nombre:") & "\n" & nombrebasedatosfecha & "\n" & ("en la ruta") & "\n" & Dialog.path)
    Try Copy user.home &/ "Cortes" To Replace$(nombrebasedatosfecha, User.home, Dialog.path)
    If Error Then
      Message.Error(("Ha habido un error al intentar copiar la base de datos"))
    Endif
  Endif

End

Public Sub ButtonRestauraCopiaSeguridad_Click()

  Dim res As Integer

  res = Message.Question(("Al restaurar una copia de seguridad, se borrarán los datos actuales!!!"), ("Continuar"), ("Cancelar"))

  If res = 2 Then Return 'cancelar la restauracion del fichero

  Dialog.Title = ("Restaurar una copia de seguridad")

  If Not Dialog.OpenFile() Then

    If Exist(user.home &/ "Cortes" & ".bak") Then
      Kill user.home &/ "Cortes" & ".bak"
    Endif
    Move user.home &/ "Cortes" To user.home &/ "Cortes" & ".bak"

    Try Copy Dialog.Path To user.home &/ "Cortes"
    If Error Then
      Message.Error(("Se ha producido un error al intentar copiar el archivo"))
    Endif
    Message.Info(("Restauración realizada"))
    form_Open()
  Endif

End

Public Sub ButtonComprobarEstructura_Click()

  Dim cadena As String

  ButtonComprobarEstructura.text = ("espere....")
  Wait 0.01
  cadena = ComprobarEstructura.AnalizaEstructura()
  If cadena = "" Then Cadena = ("No ha habido nada que arreglar")
  Message.Info(("Estructura Comprobada.") & "\n" & cadena)
  ButtonComprobarEstructura.text = ("comprobar")

End

Public Sub ButtonIdiomaPortugues_Click()

  Settings["InicioIdioma"] = "pt_PT"
  Message.Info(("La proxima vez se iniciara el programa en Portugues"))

End

Public Sub ButtonInicioEspanol_Click()

  Settings["InicioIdioma"] = "es_ES"
  Message.Info(("La proxima vez se iniciara el programa en Castellano"))

End

Public Sub ButtonIdiomaBrasil_Click()

  Settings["InicioIdioma"] = "pt_BR"
  Message.Info(("La proxima vez se iniciara el programa en Portugues-Brasil"))

End

Public Sub ButtonIdiomaIngles_Click()

  Settings["InicioIdioma"] = "en_US"
  Message.Info(("La proxima vez se iniciara el programa en Ingles"))

End

'----------------------------------------------------------
'sistema para definir un empledo y cliente por defecto
'----------------------------------------------------------
Public Sub ButtonGuardarCambios_Click()

  If ComboBoxEmpleadoPorDefecto.text <> "" Then
    Settings["EmpleadoPorDefecto"] = ComboBoxEmpleadoPorDefecto.text
  Endif

  If ComboBoxClientePorDefecto.text <> "" Then
    Settings["ClientePorDefecto"] = ComboBoxClientePorDefecto.text

  Endif
  Settings.Save()

End

Public Sub RellenaComboBoxClienteEmpleados()

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim hresult As Result

  conectar.Conexion()

  sqlstring = "SELECT nombre,id FROM Empleado order by nombre DESC" ' DESC: desendiente (1,2,3), ASC (3,2,1
  Try hresult = conectar.hconn.Exec(SQLString)
  If Error Then
    Message.Info(("se ha producido un error al intentar rellenar el combobox de empleados"))
  Else
    RellenaComboBox(ComboBoxEmpleadoPorDefecto, hresult)
  Endif

  sqlstring = "SELECT nombre,id FROM cliente order by nombre DESC" ' DESC: desendiente (1,2,3), ASC (3,2,1
  Try hresult = conectar.hconn.Exec(SQLString)
  If Error Then
    Message.Info(("se ha producido un error al intentar rellenar el combobox de clientes"))
  Else
    RellenaComboBox(ComboBoxClientePorDefecto, hresult)
  Endif

End

Public Sub RellenaComboBox(comboboxTmp As ComboBox, hresultTMP As Result)

  Dim nombretmp As String
  Dim idtmp As String

  Do While hresultTMP.Available
    nombretmp = hresultTMP["nombre"] '"Local" es el nombre del campo, que queremos leer sus datos
    idtmp = hresultTMP["id"]
    comboboxTmp.Add(idtmp & "|" & nombretmp)

    hresultTMP.MoveNext()
  Loop

End

Public Sub ButtonGuardaDatosCajon_Click()

  Settings["pwr"] = TextBoxPasswordRoot.text

  Settings["usbName"] = TextBoxUsbDispositivo.text

  Settings.Save()

End

Public Sub ButtonPruebaAbrirCajon_Click()

  Cajon.abrir()

End
