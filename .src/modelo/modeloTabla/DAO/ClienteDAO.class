' Gambas class file

Inherits PersonaDAO

Public Function Total() As Integer

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  SQLString = "SELECT id FROM Cliente"
  Try mRs = conectar.hconn.Exec(SQLString)
  If Error Then
    Message.Error(" Se ha producido un ERROR al Intentar obtener lista")
    Return -1
  Endif
  Return Val(Str$(mRs.Count))

End

Public Function registrar(NuevaCliente As PersonaVO) As Boolean

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim hresult As Result

  conectar.Conexion()
  hresult = conectar.hconn.Create("Cliente")
  hresult["id"] = Null
  hresult["dni"] = NuevaCliente.dni
  hresult["nombre"] = NuevaCliente.nombre
  hresult["telefono"] = NuevaCliente.telefono
  hresult["correo"] = NuevaCliente.correo
  hresult["domicilio"] = NuevaCliente.domicilio
  hresult["comentario"] = NuevaCliente.comentario
  hresult.update
  conectar.hconn.commit
  conectar.desconectar()
  Return True

End

Public Function ModificarId(editado As Integer, NuevaCliente As PersonaVO) As Boolean

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim hresult As Result

  conectar.Conexion()
  hresult = conectar.hconn.Edit("Cliente", "id=&1", NuevaCliente.id)
  hresult["dni"] = NuevaCliente.dni
  hresult["nombre"] = NuevaCliente.nombre
  hresult["telefono"] = NuevaCliente.telefono
  hresult["correo"] = NuevaCliente.correo
  hresult["domicilio"] = NuevaCliente.domicilio
  hresult["comentario"] = NuevaCliente.comentario
  hresult.update
  conectar.hconn.commit

End

Public Function BorrarId(valor As Integer) As Boolean

  Dim conectar As New Conexion
  Dim SQLString As String

  conectar.Conexion()
  sqlstring = "DELETE FROM Cliente WHERE id=&1"
  Try conectar.hconn.Exec(SQLString, valor)
  If Error Then
    Message.Error(" Se ha producido un ERROR al intentar Borrar datos, revise ID , " & "\nError: " & error.text)
    Return False
  Else
    conectar.desconectar()
    Return True
  Endif

End

Public Function BuscarIgual(valor As Integer, campoId As String, Optional CampoOrden As String, Optional restosql As String) As Result

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  SQLString = "Select * From Cliente"
  If CampoOrden = Null Then
    SQlString &= " WHERE " & campoId & " like '" & valor & "' " & restosql
  Else
    SQlString &= " WHERE " & campoId & " like '" & valor & "' " & restosql & " Order by " & CampoOrden
  Endif
  Try mRs = conectar.hconn.Exec(SQLString)
  If Error Then
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError:  " & error.text)
  Else
    Return mRs
  Endif

End

Public Function BuscarIgualId(valor As Integer, Optional CampoOrden As String) As Result

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  SQLString = "Select * From Cliente"
  If CampoOrden = Null Then
    SQlString &= " WHERE id like '" & valor & "' "
  Else
    SQlString &= " WHERE id like '" & valor & "'   Order by " & CampoOrden
  Endif
  Try mRs = conectar.hconn.Exec(SQLString)
  If Error Then
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else
    Return mRs
  Endif

End

Public Function BuscarContenidoDni(valor As String, Optional CampoOrden As String) As Result

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  SQLString = "Select * From Cliente"
  If CampoOrden = Null Then
    SQlString &= " WHERE dni like '%" & valor & "%' "
  Else
    SQlString &= " WHERE dni like '%" & valor & "%'  Order by " & CampoOrden
  Endif
  Try mRs = conectar.hconn.Exec(SQLString)
  If Error Then
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError:  " & error.text)
  Else
    Return mRs
  Endif

End

Public Function BuscarIgualDni(valor As String, Optional CampoOrden As String) As Result

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  SQLString = "Select * From Cliente"
  If CampoOrden = Null Then
    SQlString &= " WHERE dni like '" & valor & "' "
  Else
    SQlString &= " WHERE dni like '" & valor & "'   Order by " & CampoOrden
  Endif
  Try mRs = conectar.hconn.Exec(SQLString)
  If Error Then
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else
    Return mRs
  Endif

End

Public Function BuscarContenidoNombre(valor As String, Optional CampoOrden As String) As Result

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  SQLString = "Select * From Cliente"
  If CampoOrden = Null Then
    SQlString &= " WHERE nombre like '%" & valor & "%' "
  Else
    SQlString &= " WHERE nombre like '%" & valor & "%'  Order by " & CampoOrden
  Endif
  Try mRs = conectar.hconn.Exec(SQLString)
  If Error Then
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError:  " & error.text)
  Else
    Return mRs
  Endif

End

Public Function BuscarIgualNombre(valor As String, Optional CampoOrden As String) As Result

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  SQLString = "Select * From Cliente"
  If CampoOrden = Null Then
    SQlString &= " WHERE nombre like '" & valor & "' "
  Else
    SQlString &= " WHERE nombre like '" & valor & "'   Order by " & CampoOrden
  Endif
  Try mRs = conectar.hconn.Exec(SQLString)
  If Error Then
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else
    Return mRs
  Endif

End

Public Function BuscarContenidoTelefono(valor As String, Optional CampoOrden As String) As Result

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  SQLString = "Select * From Cliente"
  If CampoOrden = Null Then
    SQlString &= " WHERE telefono like '%" & valor & "%' "
  Else
    SQlString &= " WHERE telefono like '%" & valor & "%'  Order by " & CampoOrden
  Endif
  Try mRs = conectar.hconn.Exec(SQLString)
  If Error Then
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError:  " & error.text)
  Else
    Return mRs
  Endif

End

Public Function BuscarIgualTelefono(valor As String, Optional CampoOrden As String) As Result

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  SQLString = "Select * From Cliente"
  If CampoOrden = Null Then
    SQlString &= " WHERE telefono like '" & valor & "' "
  Else
    SQlString &= " WHERE telefono like '" & valor & "'   Order by " & CampoOrden
  Endif
  Try mRs = conectar.hconn.Exec(SQLString)
  If Error Then
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else
    Return mRs
  Endif

End

Public Function BuscarContenidoCorreo(valor As String, Optional CampoOrden As String) As Result

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  SQLString = "Select * From Cliente"
  If CampoOrden = Null Then
    SQlString &= " WHERE correo like '%" & valor & "%' "
  Else
    SQlString &= " WHERE correo like '%" & valor & "%'  Order by " & CampoOrden
  Endif
  Try mRs = conectar.hconn.Exec(SQLString)
  If Error Then
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError:  " & error.text)
  Else
    Return mRs
  Endif

End

Public Function BuscarIgualCorreo(valor As String, Optional CampoOrden As String) As Result

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  SQLString = "Select * From Cliente"
  If CampoOrden = Null Then
    SQlString &= " WHERE correo like '" & valor & "' "
  Else
    SQlString &= " WHERE correo like '" & valor & "'   Order by " & CampoOrden
  Endif
  Try mRs = conectar.hconn.Exec(SQLString)
  If Error Then
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else
    Return mRs
  Endif

End

Public Function BuscarContenidoDomicilio(valor As String, Optional CampoOrden As String) As Result

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  SQLString = "Select * From Cliente"
  If CampoOrden = Null Then
    SQlString &= " WHERE domicilio like '%" & valor & "%' "
  Else
    SQlString &= " WHERE domicilio like '%" & valor & "%'  Order by " & CampoOrden
  Endif
  Try mRs = conectar.hconn.Exec(SQLString)
  If Error Then
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError:  " & error.text)
  Else
    Return mRs
  Endif

End

Public Function BuscarIgualDomicilio(valor As String, Optional CampoOrden As String) As Result

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  SQLString = "Select * From Cliente"
  If CampoOrden = Null Then
    SQlString &= " WHERE domicilio like '" & valor & "' "
  Else
    SQlString &= " WHERE domicilio like '" & valor & "'   Order by " & CampoOrden
  Endif
  Try mRs = conectar.hconn.Exec(SQLString)
  If Error Then
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else
    Return mRs
  Endif

End

Public Function BuscarContenidoComentario(valor As String, Optional CampoOrden As String) As Result

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  SQLString = "Select * From Cliente"
  If CampoOrden = Null Then
    SQlString &= " WHERE comentario like '%" & valor & "%' "
  Else
    SQlString &= " WHERE comentario like '%" & valor & "%'  Order by " & CampoOrden
  Endif
  Try mRs = conectar.hconn.Exec(SQLString)
  If Error Then
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError:  " & error.text)
  Else
    Return mRs
  Endif

End

Public Function BuscarIgualComentario(valor As String, Optional CampoOrden As String) As Result

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  SQLString = "Select * From Cliente"
  If CampoOrden = Null Then
    SQlString &= " WHERE comentario like '" & valor & "' "
  Else
    SQlString &= " WHERE comentario like '" & valor & "'   Order by " & CampoOrden
  Endif
  Try mRs = conectar.hconn.Exec(SQLString)
  If Error Then
    Message.Error(" Se ha producido un ERROR al Buscar datos, " & "\nError: " & error.text)
  Else
    Return mRs
  Endif

End

Public Function sql(consulta As String) As Result

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  Try mRs = conectar.hconn.Exec(consulta)
  If Error Then message.info("Consulta erronea, revisela")
  Return mRs

End

Public Function informe() As String

  Dim texto As String

  Print "Base de datos: Cortes"
  Print "        Tabla: Cliente"
  Print "             Campo: id Tipo: Null"
  Print "             Campo: dni Tipo: String"
  Print "             Campo: nombre Tipo: String"
  Print "             Campo: telefono Tipo: String"
  Print "             Campo: correo Tipo: String"
  Print "             Campo: domicilio Tipo: String"
  Print "             Campo: comentario Tipo: String"
  texto = "Base_de_datos:|Cortes|"
  texto &= "Tabla:|Cliente"
  texto &= "|campo:|id|tipo:|Null"
  texto &= "|campo:|dni|tipo:|String"
  texto &= "|campo:|nombre|tipo:|String"
  texto &= "|campo:|telefono|tipo:|String"
  texto &= "|campo:|correo|tipo:|String"
  texto &= "|campo:|domicilio|tipo:|String"
  texto &= "|campo:|comentario|tipo:|String"
  Return texto

End

Public Function gridFormatearColumnas(grid As GridView) As Gridview

  Dim f As New Font

  f.name = "Sans"
  f.size = Me.sizefont
  Me.formatearFechaIdioma()
  Me.arrayAnchoColumnas = New Integer[]
  With grid
    .header = 3
    .rows.count = 0
    .columns.count = 7
    .Columns[0].title = ("id")
    .Columns[0].width = -1 'f.textwidth(("id")&"m")
    Me.arrayAnchoColumnas.add(-1)
    .Columns[1].title = ("dni")
    .Columns[1].width = -1 'f.textwidth(("dni")&"m")
    Me.arrayAnchoColumnas.add(-1)
    .Columns[2].title = ("nombre")
    .Columns[2].width = -1 'f.textwidth(("nombre")&"m")
    Me.arrayAnchoColumnas.add(-1)
    .Columns[3].title = ("telefono")
    .Columns[3].width = -1 'f.textwidth(("telefono")&"m")
    Me.arrayAnchoColumnas.add(-1)
    .Columns[4].title = ("correo")
    .Columns[4].width = -1 'f.textwidth(("correo")&"m")
    Me.arrayAnchoColumnas.add(-1)
    .Columns[5].title = ("domicilio")
    .Columns[5].width = -1 'f.textwidth(("domicilio")&"m")
    Me.arrayAnchoColumnas.add(-1)
    .Columns[6].title = ("comentario")
    .Columns[6].width = -1 'f.textwidth(("comentario")&"m")
    Me.arrayAnchoColumnas.add(-1)
    .font.name = "Sans"
    .font.size = Me.sizefont
    .Background = 16777215
    .Foreground = 0
  End With
  grid.Mode = Select.Single
  Return grid

End

Public Function gridFormatearFilas(grid As GridView) As Gridview

  Dim titulolargo As String
  Dim f As New Font

  f.name = "Sans"
  f.size = Me.sizefont
  With grid
    .header = 3
    .rows.count = 7
    .columns.count = 2
    .Columns[0].title = "Campos"
    .Columns[1].title = "Registro"
    .font.name = "Sans"
    .font.size = 10
    .Background = 16777215
    .Foreground = 0
  End With
  grid[0, 0].text = ("id")
  grid[0, 0].background = color.lightgray
  If Len(titulolargo) < Len(("id")) Then
    titulolargo = ("id")
  Endif
  grid[1, 0].text = ("dni")
  grid[1, 0].background = color.lightgray
  If Len(titulolargo) < Len(("dni")) Then
    titulolargo = ("dni")
  Endif
  grid[2, 0].text = ("nombre")
  grid[2, 0].background = color.lightgray
  If Len(titulolargo) < Len(("nombre")) Then
    titulolargo = ("nombre")
  Endif
  grid[3, 0].text = ("telefono")
  grid[3, 0].background = color.lightgray
  If Len(titulolargo) < Len(("telefono")) Then
    titulolargo = ("telefono")
  Endif
  grid[4, 0].text = ("correo")
  grid[4, 0].background = color.lightgray
  If Len(titulolargo) < Len(("correo")) Then
    titulolargo = ("correo")
  Endif
  grid[5, 0].text = ("domicilio")
  grid[5, 0].background = color.lightgray
  If Len(titulolargo) < Len(("domicilio")) Then
    titulolargo = ("domicilio")
  Endif
  grid[6, 0].text = ("comentario")
  grid[6, 0].background = color.lightgray
  If Len(titulolargo) < Len(("comentario")) Then
    titulolargo = ("comentario")
  Endif
  grid.Columns[0].width = F.textwidth(titulolargo & "m")
  Return grid

End

Public Sub contenido() As Result

  Dim conectar As New Conexion
  Dim SQLString As String
  Dim mRs As Result

  conectar.Conexion()
  SQLString = "SELECT * FROM Cliente"
  Try mRs = conectar.hconn.Exec(SQLString)
  If Error Then message.info("Consulta erronea, revisela")
  Return mRs

End

Public Function mostrarRegistro(numero As Integer, grid As GridView, Optional sqlcadena As String) As Result

  Dim resultado As Result

  If sqlcadena = Null Then
    resultado = contenido()
  Else
    resultado = sql(sqlcadena)
  Endif
  resultado.MoveTo(numero)
  Try grid[0, 1].text = Str$(resultado!id)
  Try grid[1, 1].text = Str$(resultado!dni)
  Try grid[2, 1].text = Str$(resultado!nombre)
  Try grid[3, 1].text = Str$(resultado!telefono)
  Try grid[4, 1].text = Str$(resultado!correo)
  Try grid[5, 1].text = Str$(resultado!domicilio)
  Try grid[6, 1].text = Str$(resultado!comentario)

End

Public Function mostrarRegistroVO(objetoVO As PersonaVO, grid As GridView) As Result

  Try grid[0, 1].text = Str$(objetoVO.id)
  Try grid[1, 1].text = Str$(objetoVO.dni)
  Try grid[2, 1].text = Str$(objetoVO.nombre)
  Try grid[3, 1].text = Str$(objetoVO.telefono)
  Try grid[4, 1].text = Str$(objetoVO.correo)
  Try grid[5, 1].text = Str$(objetoVO.domicilio)
  Try grid[6, 1].text = Str$(objetoVO.comentario)

End

Public Function GridResultanteSQL(res As Result, grid As GridView) As Gridview

  Dim columna As Integer
  Dim hField As ResultField
  Dim a As Integer
  Dim fila As Integer
  'defino la regilla
  With grid
    .header = 3
    .rows.count = 0
    Try .columns.count = res.Fields.Count
    columna = -1
    For Each hField In res.Fields
      columna = columna + 1
      Try .Columns[columna].title = Str$(hField.name)
    Next
    .font.name = "Sans"
    .font.size = 10
    .Background = 16777215
    .Foreground = 0
  End With
  Return grid

End

Public hresultadoNuevo As Result
Public gridviewPropio As GridView 'para tener acceso desde clases heredadas
Public actualiza As Observer

Public iconoTrue As String = "icon:/16/apply"
Public iconoFalse As String = "icon:/16/cancel"
Public sizefont As Integer = 10

Public formatoFecha As String

Public Sub MostrarGridView(gridviewtrabajo As GridView, Optional cadenaSQL As String, Optional resultado As Result)

  gridFormatearColumnas(gridviewtrabajo)
  gridviewPropio = gridviewtrabajo

  If Not IsNull(resultado) Then
    hresultadoNuevo = resultado
  Else
    'no ha habido resultado
    If cadenaSQL = "" Then
      hresultadoNuevo = contenido()
    Else
      hresultadoNuevo = sql(cadenaSQL)
    Endif
  Endif

  actualiza = New Observer(gridviewPropio) As "Observar"
  gridviewPropio.tag = Split(NombreCampos()["sintraducidos"], "|")
  gridviewPropio.rows.count = 0
  gridviewPropio.rows.count = hresultadoNuevo.count
  AsignaAnchoGrid()

End

Property ColorFilaPar As Integer
Private hColorFilaPar As Integer

Private Function ColorFilaPar_read() As Integer

  Return hColorFilaPar

End

Private Sub ColorFilaPar_write(Valor As Integer)

  hColorFilaPar = Valor

End

Property ColorFilaImPar As Integer
Private hColorFilaImPar As Integer

Private Function ColorFilaImPar_read() As Integer

  Return hColorFilaImPar

End

Private Sub ColorFilaImPar_write(Valor As Integer)

  hColorFilaImPar = Valor

End

Public Sub Observar_Data(row As Integer, column As Integer)

  Dim f As New Font
  Dim datocontenido As Variant

  f.name = "Sans"
  f.size = Me.sizefont

  '-------------------------------------------
  'colores....filas impar / par ge regillas
  '-------------------------------------------
  If row Mod 2 = 0 Then
    Me.gridviewPropio.Data.Background = Me.ColorFilaImPar
  Else
    Me.gridviewPropio.Data.Background = Me.ColorFilaPar
  Endif

  Me.hresultadoNuevo.MoveTo(row)
  'comprobar si hay datos en TAG
  If IsNull(Me.gridviewPropio.tag) Then
    Try datocontenido = Me.hresultadoNuevo[Me.gridviewPropio.columns[column].text]
    If IsDate(Str$(datocontenido)) Then
      Me.gridviewPropio.Data.text = Format(datocontenido, Me.formatofecha)
    Else
      If IsBoolean(Str$(datocontenido)) Then
        If datocontenido Then
          Me.gridviewPropio.data.picture = picture[Me.iconoTrue]
        Else
          Me.gridviewPropio.data.picture = picture[Me.iconoFalse]
        Endif
      Else
        Me.gridviewPropio.Data.text = datocontenido
      Endif
    Endif
    ''hay datos en  TAG
  Else
    Try datocontenido = Me.hresultadoNuevo[Me.GridViewPropio.tag[column]]
    If IsDate(Str$(datocontenido)) Then
      Me.gridviewPropio.Data.text = Format(datocontenido, Me.formatofecha)
    Else
      If IsBoolean(Str$(datocontenido)) Then
        If datocontenido Then
          Me.gridviewPropio.data.picture = picture[Me.iconoTrue]
        Else
          Me.gridviewPropio.data.picture = picture[Me.iconoFalse]
        Endif
      Else
        Me.gridviewPropio.Data.text = datocontenido
      Endif
    Endif
  Endif

  '-----------------------------------------------
  ' columna con id, con ancho 0, para que no se vea
  '-----------------------------------------------
  If Upper$(Me.gridviewPropio.Columns[column].title) = Upper$("id") Then
    Me.arrayAnchoColumnas[column] = 0
    Return 'salgo de la funcion
  Endif

  'Compruebo ancho y amplio si es necesario.
  If Me.arrayAnchoColumnas[column] < F.textwidth(Me.gridviewPropio.Data.text) Then
    Me.arrayAnchoColumnas[column] = F.textwidth(Me.gridviewPropio.Data.text & "m")
  Endif

End

'Array que contiene los valores del ancho de las columnas.
Public arrayAnchoColumnas As New Integer[]

'AsignaAnchoGrid
Public Sub AsignaAnchoGrid()

  Dim a As Integer

  For a = 0 To Me.arrayAnchoColumnas.max
    Me.gridviewPropio.Columns[a].width = Me.arrayAnchoColumnas[a]
  Next

End

Public Sub formatearFechaIdioma()

  If System.Language = "en_US.UTF-8" Then
    Me.formatofecha = "mm/dd/yyyy" 'usa
  Else
    Me.formatofecha = "dd/mm/yyyy" 'esp
  Endif

End

'-----------------------------------------------------
'añadido ordenar por columnas haciendo click...
'-----------------------------------------------------
Public ordenlistado As Integer

'PUBLIC SUB Observar_ColumnClick(Column AS Integer)
'IF me.ordenlistado = 0 THEN
'me.ord_AZ(Me.gridviewPropio, Column)
'me.ordenlistado = 1
'ELSE
'me.ordenlistado = 0
'ord_ZA(Me.gridviewPropio, Column)
'ENDIF
'END

Public Sub ord_AZ(grid As GridView, a As Integer)
  'a: indica la columna a la que ordenamos
  'grid: es la rejilla que ordenamos

  Dim limite As Integer
  Dim cambio1 As String
  Dim i As Integer
  Dim j As Integer
  Dim col As Integer

  limite = grid.Rows.COUNT
  If (grid.Columns.COUNT < a + 1) Or a < 0 Then
    Message.Error("Error en la columna introducida para ordenar")
    grid.visible = True
    Return

  Endif
  For i = 0 To limite - 1
    For j = 0 To limite - 2
      If UCase$(Grid[j, a].Text) > UCase$(Grid[j + 1, a].Text) Then

        For col = 0 To grid.Columns.COUNT - 1
          cambio1 = Grid[j, col].Text
          Grid[j, col].text = Grid[j + 1, col].Text
          Grid[j + 1, col].text = cambio1

        Next

      Endif
    Next
  Next

End

'------------------------------------------------------------------------
Public Sub ord_ZA(grid As GridView, a As Integer)
  'a: indica la columna a la que ordenamos
  'grid: es la rejilla que ordenamos

  Dim limite As Integer
  Dim cambio1 As String
  Dim i As Integer
  Dim j As Integer
  Dim col As Integer

  limite = grid.Rows.COUNT
  If (grid.Columns.COUNT < a + 1) Or a < 0 Then
    Message.Error("Error en la columna introducida para ordenar")
    grid.visible = True
    Return

  Endif
  For i = 0 To limite - 2

    For j = i To limite - 1
      If UCase$(Grid[i, a].Text) <= UCase$(Grid[j, a].Text) Then
        For col = 0 To grid.Columns.COUNT - 1
          cambio1 = Grid[j, col].Text
          Grid[j, col].text = Grid[i, col].Text
          Grid[i, col].text = cambio1
        Next
      Endif
    Next
  Next

End

Public Function ConvertirResult(hr As Result) As PersonaVO[]

  Dim datos As New PersonaVO[]
  Dim datotmp As PersonaVO

  While hr.available
    datotmp = New PersonaVO
    Try datotmp.id = hr["id"]
    Try datotmp.dni = hr["dni"]
    Try datotmp.nombre = hr["nombre"]
    Try datotmp.telefono = hr["telefono"]
    Try datotmp.correo = hr["correo"]
    Try datotmp.domicilio = hr["domicilio"]
    Try datotmp.comentario = hr["comentario"]
    Try datos.add(datotmp)
    hr.movenext
  Wend
  Return datos

End

Public Function filaSeleccionadaVO() As PersonaVO

  Dim colecciontmp As New Collection
  Dim fila As Integer
  Dim idbuscado As Integer
  Dim objTempVO As New PersonaVO

  Try fila = gridviewPropio.row
  If Error Or If FILA = -1 Then
    message.info(("No hay registro seleccionado")) 'no hay fila seleccionada
    Return Null
  Endif
  idbuscado = gridviewPropio[fila, 0].text
  objTempVO = Me.ConvertirResult(Me.BuscarIgual(idbuscado, "id"))[0]
  Return objTempVO

End

Public Function extraeColumnaArray(datos As PersonaVO[], nombrecampo As String) As String

  Dim datotmp As Object
  Dim lista As New String[]

  For Each datotmp In datos
    lista.Add(Object.GetProperty(datotmp, nombrecampo))
  Next
  Return lista.Join(",")

End

Public FormularioTitulo As String

Public Sub FormularioRegistrar(numeropaneles As Integer)

  Dim respuesta As Collection
  Dim codigocampos As String
  Dim tmpVo As New PersonaVO

  FormAutomaticoDinamico.titulo = Me.FormularioTitulo
  codigocampos = Me.GeneradorCodigoFormulario("registrar") 'necesario Me por si uso herencia para adaptar el formulario
  respuesta = FormAutomaticoDinamico.iniciar(codigocampos, "Nuevo Registro", numeroPaneles)
  If Not IsNull(respuesta) Then
    tmpVo = tmpVo.ConvertirColeccionaVO(respuesta)
    Me.registrar(tmpVO)
  Else
    Return
  Endif

End

Public Function FormularioModificarRegistroId(identificador As Integer, datosEditar As PersonaVO, numeropaneles As Integer) As Boolean

  Dim respuesta As Collection
  Dim codigocampos As String
  Dim tmpVo As New PersonaVO

  codigocampos = Me.GeneradorCodigoFormulario("editar", datosEditar) 'necesario Me por si uso herencia para adaptar el formulario
  FormAutomaticoDinamico.titulo = Me.FormularioTitulo
  respuesta = FormAutomaticoDinamico.iniciar(codigocampos, "Nuevo Registro", numeroPaneles)
  If Not IsNull(respuesta) Then
    tmpVo = tmpVo.ConvertirColeccionaVO(respuesta)
    tmpVo.id = identificador
    Me.ModificarId(tmpVo.Id, tmpVo)
    Return True
  Else
    Return False
  Endif

End

Public Function GeneradorCodigoFormulario(tipo As String, Optional datosEditar As PersonaVO) As String

  Dim codigocampos As String

  If tipo = "registrar" Then
    codigocampos &= "null|id|null;"
    codigocampos &= "textbox|dni|" & ("dni") & "|;"
    codigocampos &= "textbox|nombre|" & ("nombre") & "|;"
    codigocampos &= "textbox|telefono|" & ("telefono") & "|;"
    codigocampos &= "textbox|correo|" & ("correo") & "|;"
    codigocampos &= "textbox|domicilio|" & ("domicilio") & "|;"
    codigocampos &= "textbox|comentario|" & ("comentario") & "|;"
  Else
    codigocampos &= "null|id|null;"
    codigocampos &= "textbox|dni|" & ("dni") & "|" & datosEditar.dni & ";"
    codigocampos &= "textbox|nombre|" & ("nombre") & "|" & datosEditar.nombre & ";"
    codigocampos &= "textbox|telefono|" & ("telefono") & "|" & datosEditar.telefono & ";"
    codigocampos &= "textbox|correo|" & ("correo") & "|" & datosEditar.correo & ";"
    codigocampos &= "textbox|domicilio|" & ("domicilio") & "|" & datosEditar.domicilio & ";"
    codigocampos &= "textbox|comentario|" & ("comentario") & "|" & datosEditar.comentario & ";"
  Endif
  Return codigocampos

End

Public Function NombreCampos() As Collection

  Dim codigocampos As New Collection
  Dim textocamposTraducidos As String
  Dim textocampos As String

  textocamposTraducidos = ("id") & "|" & ("dni") & "|" & ("nombre") & "|" & ("telefono") & "|" & ("correo") & "|" & ("domicilio") & "|" & ("comentario")
  textocampos = "id" & "|" & "dni" & "|" & "nombre" & "|" & "telefono" & "|" & "correo" & "|" & "domicilio" & "|" & "comentario"
  codigocampos.add(textocamposTraducidos, "traducidos")
  codigocampos.add(textocampos, "sintraducidos")
  Return codigocampos

End

Public Sub ImprimirRapidoTablaHorizontal()

  Dim contenidofichero As String
  Dim codigo As String
  Dim a As Integer, fila As Integer, columna As Integer

  Application.busy = 1

  codigo = "<table border=\"1\" style=\"width:100%\">\n"
  'imprimo titulos
  codigo &= "<tr>\n" ""
  For a = 0 To gridviewPropio.columns.Max
    codigo &= "<td><b>" & gridviewPropio.Columns[a].title & "</b></td>"
  Next
  codigo &= "</tr>\n" ""

  For fila = 0 To gridviewPropio.Rows.Max

    codigo &= "<tr>\n" ""
    For columna = 0 To gridviewPropio.columns.Max
      codigo &= "<td>" & gridviewPropio[fila, columna].text & "</td>"
    Next
    codigo &= "</tr>\n" ""

  Next

  codigo &= "</table>\n"

  contenidofichero = File.Load("estructura.html")
  contenidofichero = Replace$(contenidofichero, "TITULO", ("INFORME"))
  contenidofichero = Replace$(contenidofichero, "CONTENIDO", codigo)
  file.Save("/tmp/informe.html", contenidofichero)
  Desktop.Open("/tmp/informe.html")
  Application.Busy = 0

End

Public Sub ImprimirRapidoTablaVertical()

  Dim contenidofichero As String
  Dim codigo As String
  Dim a As Integer, fila As Integer, columna As Integer

  Application.busy = 1

  Try fila = gridviewPropio.Row
  If fila = -1 Or If Error Then
    Application.Busy = 0
    Message.Info(("Seleccione un registro"))
    Return
  Endif

  codigo &= "<table border=\"1\" >\n"
  For columna = 0 To gridviewPropio.columns.Max
    codigo &= "<tr>\n" ""

    codigo &= "<td><b>" & gridviewPropio.Columns[columna].title & "</b></td>"

    codigo &= "<td style=\"width:100%\">" & gridviewPropio[fila, columna].text & "</td>"
    codigo &= "</tr>\n" ""

  Next
  codigo &= "</table>\n"
  CODIGO &= "<BR><BR>"

  contenidofichero = File.Load("estructura.html")
  contenidofichero = Replace$(contenidofichero, "TITULO", ("INFORME"))
  contenidofichero = Replace$(contenidofichero, "CONTENIDO", codigo)
  file.Save("/tmp/informe.html", contenidofichero)
  Desktop.Open("/tmp/informe.html")
  Application.Busy = 0

End
